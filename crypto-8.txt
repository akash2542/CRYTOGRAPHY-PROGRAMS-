#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to generate the cipher alphabet from a keyword
void generateCipherAlphabet(char *keyword, char *cipherAlphabet) {
    int keywordLength = strlen(keyword);
    int i, j;

    // Copy the keyword to the beginning of the cipher alphabet
    strcpy(cipherAlphabet, keyword);

    // Mark letters used in the keyword by setting them to '\0'
    for (i = 0; i < keywordLength; i++) {
        cipherAlphabet[i] = toupper(cipherAlphabet[i]);
        for (j = i + 1; j < keywordLength; j++) {
            if (cipherAlphabet[j] == cipherAlphabet[i])
                cipherAlphabet[j] = '\0';
        }
    }

    // Append remaining unused letters to the cipher alphabet
    char letter = 'A';
    for (i = keywordLength; i < ALPHABET_SIZE; i++) {
        while (cipherAlphabet[i] == '\0') {
            if (!strchr(keyword, letter)) {
                cipherAlphabet[i] = letter;
                letter++;
            } else {
                letter++;
            }
        }
    }

    cipherAlphabet[ALPHABET_SIZE] = '\0'; // Null terminate the cipher alphabet string
}

// Function to encrypt plaintext using the given cipher alphabet
void encrypt(char *plaintext, char *cipherAlphabet, char *ciphertext) {
    int i;
    int len = strlen(plaintext);

    for (i = 0; i < len; i++) {
        if (isalpha(plaintext[i])) {
            if (islower(plaintext[i])) {
                ciphertext[i] = tolower(cipherAlphabet[plaintext[i] - 'a']);
            } else {
                ciphertext[i] = toupper(cipherAlphabet[plaintext[i] - 'A']);
            }
        } else {
            ciphertext[i] = plaintext[i]; // Non-alphabetic characters remain unchanged
        }
    }

    ciphertext[len] = '\0'; // Null terminate the ciphertext string
}

// Function to decrypt ciphertext using the given cipher alphabet
void decrypt(char *ciphertext, char *cipherAlphabet, char *decryptedtext) {
    int i;
    int len = strlen(ciphertext);
    char *ptr;

    for (i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            if (islower(ciphertext[i])) {
                ptr = strchr(cipherAlphabet, ciphertext[i]);
                decryptedtext[i] = 'a' + (ptr - cipherAlphabet);
            } else {
                ptr = strchr(cipherAlphabet, tolower(ciphertext[i]));
                decryptedtext[i] = 'A' + (ptr - cipherAlphabet);
            }
        } else {
            decryptedtext[i] = ciphertext[i]; // Non-alphabetic characters remain unchanged
        }
    }

    decryptedtext[len] = '\0'; // Null terminate the decryptedtext string
}

int main() {
    char keyword[] = "CIPHER";
    char plaintext[] = "HELLO WORLD";
    char cipherAlphabet[ALPHABET_SIZE + 1]; // +1 for null terminator
    char ciphertext[strlen(plaintext) + 1];
    char decryptedtext[strlen(plaintext) + 1];

    generateCipherAlphabet(keyword, cipherAlphabet);
    encrypt(plaintext, cipherAlphabet, ciphertext);
    decrypt(ciphertext, cipherAlphabet, decryptedtext);

    printf("Plaintext: %s\n", plaintext);
    printf("Generated Cipher Alphabet: %s\n", cipherAlphabet);
    printf("Ciphertext: %s\n", ciphertext);
    printf("Decrypted text: %s\n", decryptedtext);

    return 0;
}
output:
Plaintext: HELLO WORLD
Generated Cipher Alphabet: CIPHERABDFGJKLMNOQSTUVWXYZ
Ciphertext: JGZZV FQJKZ
Decrypted text: HELLO WORLD