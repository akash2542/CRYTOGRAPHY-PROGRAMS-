#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define GRID_SIZE 5

// Function to prepare the key for Playfair cipher (removing duplicates and 'J'='I')
void prepareKey(char *key, char *cleanKey) {
    int len = strlen(key);
    int i, j, k = 0;
    char temp[GRID_SIZE * GRID_SIZE]; // Temporary array to store processed key

    // Convert key to uppercase and remove non-alphabetic characters
    for (i = 0; i < len; i++) {
        if (isalpha(key[i])) {
            temp[k++] = toupper(key[i]);
            if (temp[k - 1] == 'J') // Treat 'J' as 'I'
                temp[k - 1] = 'I';
        }
    }

    // Remove duplicates from temp and fill cleanKey
    int table[26] = {0}; // To mark occurrences of letters
    k = 0;
    for (i = 0; i < strlen(temp); i++) {
        if (table[temp[i] - 'A'] == 0) {
            table[temp[i] - 'A'] = 1;
            cleanKey[k++] = temp[i];
        }
    }
    cleanKey[k] = '\0'; // Null terminate cleanKey
}

// Function to generate the Playfair cipher grid from the cleanKey
void generateGrid(char *cleanKey, char grid[GRID_SIZE][GRID_SIZE]) {
    int i, j, k = 0;
    int table[26] = {0}; // To mark used letters

    // Fill the grid with letters from cleanKey
    for (i = 0; i < GRID_SIZE; i++) {
        for (j = 0; j < GRID_SIZE; j++) {
            if (k < strlen(cleanKey)) {
                grid[i][j] = cleanKey[k++];
                table[grid[i][j] - 'A'] = 1;
            } else {
                // Fill remaining grid with the rest of the alphabet
                while (table['A' + k] || 'A' + k == 'J') // Skip 'J' if it's not used
                    k++;
                grid[i][j] = 'A' + k++;
            }
        }
    }
}

// Function to decrypt Playfair cipher text
void decryptPlayfair(char *ciphertext, char grid[GRID_SIZE][GRID_SIZE], char *plaintext) {
    int len = strlen(ciphertext);
    int i, j;
    char a, b;
    int row1, col1, row2, col2;

    for (i = 0; i < len; i += 2) {
        a = toupper(ciphertext[i]);
        b = toupper(ciphertext[i + 1]);

        // Find positions of characters a and b in the grid
        for (j = 0; j < GRID_SIZE; j++) {
            for (int k = 0; k < GRID_SIZE; k++) {
                if (grid[j][k] == a) {
                    row1 = j;
                    col1 = k;
                }
                if (grid[j][k] == b) {
                    row2 = j;
                    col2 = k;
                }
            }
        }

        // Decrypt the digraph according to Playfair rules
        if (row1 == row2) {
            // Same row, use letters to the left
            plaintext[i] = grid[row1][(col1 + GRID_SIZE - 1) % GRID_SIZE];
            plaintext[i + 1] = grid[row2][(col2 + GRID_SIZE - 1) % GRID_SIZE];
        } else if (col1 == col2) {
            // Same column, use letters above
            plaintext[i] = grid[(row1 + GRID_SIZE - 1) % GRID_SIZE][col1];
            plaintext[i + 1] = grid[(row2 + GRID_SIZE - 1) % GRID_SIZE][col2];
        } else {
            // Forming a rectangle, swap horizontally
            plaintext[i] = grid[row1][col2];
            plaintext[i + 1] = grid[row2][col1];
        }
    }

    plaintext[len] = '\0'; // Null terminate the plaintext string
}

int main() {
    char key[] = "PT109"; // Key used to generate the Playfair cipher grid
    char ciphertext[] = "KXJEY UREBE ZWEHE WRYTU HEYFS KREHE GOYFI WTTTU OLKSY CAJPO BOTEI ZONTX BYBNT GONEY CUZWR GDSON SXBOU YWRHE BAAHY USEDQ";
    char cleanKey[GRID_SIZE * GRID_SIZE];
    char grid[GRID_SIZE][GRID_SIZE];
    char plaintext[strlen(ciphertext)];

    // Prepare the key
    prepareKey(key, cleanKey);

    // Generate the Playfair cipher grid
    generateGrid(cleanKey, grid);

    // Decrypt the ciphertext
    decryptPlayfair(ciphertext, grid, plaintext);

    // Output the decrypted plaintext
    printf("Decrypted plaintext:\n%s\n", plaintext);

    return 0;
}
output:
Decrypted plaintext:
WEARELEAVING
PORT