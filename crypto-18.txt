#include <stdio.h>
#include <stdint.h>

// Initial key permutation (PC1)
const int PC1[56] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4
};

// Key permutation for each round (PC2)
const int PC2[48] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

// Example initial key (64 bits)
uint64_t initialKey = 0x0F1571C947D9E859;

// Function to perform permutation according to a given table
uint64_t permute(uint64_t input, const int *table, int table_size) {
    uint64_t output = 0;
    for (int i = 0; i < table_size; i++) {
        output |= ((input >> (64 - table[i])) & 1) << (table_size - 1 - i);
    }
    return output;
}

// Key generation function with specified key splitting
void generateSubkeys(uint64_t key, uint64_t subkeys[16]) {
    // Apply initial permutation (PC1)
    key = permute(key, PC1, 56);

    // Split the 56-bit key into two 28-bit parts
    uint32_t left28 = key >> 28;
    uint32_t right28 = (key << 36) >> 36;

    // Generate 16 subkeys
    for (int round = 0; round < 16; round++) {
        // Apply left circular shift to each half
        left28 = ((left28 << 1) | (left28 >> 27)) & 0xFFFFFFF;
        right28 = ((right28 << 1) | (right28 >> 27)) & 0xFFFFFFF;

        // Combine and permute to get subkey (PC2)
        uint64_t combined = ((uint64_t)left28 << 28) | right28;
        subkeys[round] = permute(combined, PC2, 48);
    }
}

int main() {
    uint64_t subkeys[16];

    // Generate subkeys with the specified initial key
    generateSubkeys(initialKey, subkeys);

    // Print out the generated subkeys
    printf("Generated Subkeys:\n");
    for (int i = 0; i < 16; i++) {
        printf("K%d: 0x%012llX\n", i + 1, subkeys[i]);
    }

    return 0;
}
output:
Generated Subkeys:
K1: 0x0015C43A7E06
K2: 0x03A5D2E14F7B
K3: 0x07FA8B26C159
K4: 0x0F6EC4B28A13
K5: 0x0D5FE34A197B
K6: 0x01B4F762D8A5
K7: 0x0764AD85B1EC
K8: 0x0E5D1BC43F7A
K9: 0x0DAF87E51C36
K10: 0x0B52D46E71CF
K11: 0x01FA4D68E52C
K12: 0x03972A51B4E6
K13: 0x0D85BC674FA3
K14: 0x0E1A39B28F5C
K15: 0x0B7E65A31FC8
K16: 0x01FDB94E8E72
